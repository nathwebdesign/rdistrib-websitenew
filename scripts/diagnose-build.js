#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic du build Next.js pour Netlify\n');

// V√©rifier la pr√©sence des fichiers critiques
const criticalFiles = [
  'next.config.ts',
  'package.json',
  'tsconfig.json',
  'netlify.toml'
];

console.log('üìã V√©rification des fichiers critiques:');
criticalFiles.forEach(file => {
  const exists = fs.existsSync(path.join(process.cwd(), file));
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// V√©rifier le dossier out
const outDir = path.join(process.cwd(), 'out');
if (fs.existsSync(outDir)) {
  console.log('\nüìÅ Contenu du dossier out:');
  const files = fs.readdirSync(outDir);
  console.log(`  Nombre de fichiers: ${files.length}`);
  console.log(`  Fichiers HTML: ${files.filter(f => f.endsWith('.html')).join(', ')}`);
  
  // V√©rifier 404.html
  const has404 = fs.existsSync(path.join(outDir, '404.html'));
  console.log(`  ${has404 ? '‚úÖ' : '‚ùå'} 404.html pr√©sent`);
  
  // V√©rifier index.html
  const hasIndex = fs.existsSync(path.join(outDir, 'index.html'));
  console.log(`  ${hasIndex ? '‚úÖ' : '‚ùå'} index.html pr√©sent`);
} else {
  console.log('\n‚ùå Le dossier out n\'existe pas. Ex√©cutez "npm run build" d\'abord.');
}

// V√©rifier les variables d'environnement
console.log('\nüîê Variables d\'environnement:');
const envVars = [
  'NEXT_PUBLIC_GOOGLE_MAPS_API_KEY'
];

envVars.forEach(envVar => {
  const hasVar = process.env[envVar] !== undefined;
  console.log(`  ${hasVar ? '‚úÖ' : '‚ö†Ô∏è '} ${envVar}: ${hasVar ? 'D√©finie' : 'Non d√©finie (optionnel)'}`);
});

// Rechercher les imports probl√©matiques
console.log('\nüîç Recherche de probl√®mes potentiels:');

function searchInFiles(dir, pattern, filePattern = /\.(ts|tsx|js|jsx)$/) {
  let results = [];
  
  function search(currentDir) {
    if (currentDir.includes('node_modules') || currentDir.includes('.next')) return;
    
    const files = fs.readdirSync(currentDir);
    
    files.forEach(file => {
      const filePath = path.join(currentDir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        search(filePath);
      } else if (filePattern.test(file)) {
        const content = fs.readFileSync(filePath, 'utf8');
        if (pattern.test(content)) {
          const lines = content.split('\n');
          lines.forEach((line, index) => {
            if (pattern.test(line)) {
              results.push({
                file: filePath.replace(process.cwd(), '.'),
                line: index + 1,
                content: line.trim()
              });
            }
          });
        }
      }
    });
  }
  
  search(dir);
  return results;
}

// Rechercher window/document sans protection
const windowRefs = searchInFiles(
  process.cwd(), 
  /(?<!typeof )window\.|document\.|navigator\./,
  /\.(ts|tsx)$/
);

if (windowRefs.length > 0) {
  console.log('  ‚ö†Ô∏è  R√©f√©rences √† window/document trouv√©es:');
  windowRefs.slice(0, 5).forEach(ref => {
    console.log(`    ${ref.file}:${ref.line}`);
  });
} else {
  console.log('  ‚úÖ Aucune r√©f√©rence probl√©matique √† window/document');
}

// V√©rifier les imports dynamiques
const dynamicImports = searchInFiles(
  process.cwd(),
  /dynamic\(/,
  /\.(ts|tsx)$/
);

if (dynamicImports.length > 0) {
  console.log(`  ‚ÑπÔ∏è  ${dynamicImports.length} imports dynamiques trouv√©s (OK pour les composants client)`);
}

// V√©rifier la configuration Next.js
console.log('\n‚öôÔ∏è  Configuration Next.js:');
try {
  const nextConfig = fs.readFileSync(path.join(process.cwd(), 'next.config.ts'), 'utf8');
  const hasExport = nextConfig.includes("output: 'export'");
  const hasUnoptimized = nextConfig.includes('unoptimized: true');
  
  console.log(`  ${hasExport ? '‚úÖ' : '‚ùå'} output: 'export' configur√©`);
  console.log(`  ${hasUnoptimized ? '‚úÖ' : '‚ùå'} images.unoptimized: true configur√©`);
} catch (error) {
  console.log('  ‚ùå Impossible de lire next.config.ts');
}

// Recommandations
console.log('\nüí° Recommandations:');
console.log('  1. Ex√©cutez "npm run build" pour g√©n√©rer le site statique');
console.log('  2. Testez localement avec "npx serve out"');
console.log('  3. V√©rifiez que tous les fichiers HTML sont g√©n√©r√©s dans /out');
console.log('  4. Assurez-vous que netlify.toml pointe vers le dossier "out"');
console.log('  5. Supprimez tout cache Netlify et red√©ployez');

console.log('\n‚úÖ Diagnostic termin√©\n');